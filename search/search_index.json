{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Fmtutil","text":"<p>Lightweight formatter objects, this fmtutil package was created for <code>parse</code> and <code>format</code> any string values that match a format pattern which created base on Python regular expression.</p> <p> First objective of this project is include necessary formatter objects for any data components package which mean we can <code>parse</code> any complicate names on data source and ingest the right names to in-house or data target.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install -U fmtutil[all]\n</code></pre> <p>Python version supported:</p> Python Version Installation Support Fixed Bug <code>== 3.8</code> <code>pip install \"fmtutil&gt;=0.4,&lt;0.5.0\"</code> <code>&gt;=3.9,&lt;3.13</code> <code>pip install -U fmtutil</code> <p>Note</p> <p>This package has one dependency package, <code>python-dateutil</code>, this package use for support add and sub datetime value on the Datetime formatter only. If you do not want to install this package, you can use <code>pip install -U fmtutil</code>.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>For example, we want to get filename with the format like, <code>filename_20220101.csv</code>, on the file system storage, and we want to incremental ingest the latest file with date 2022-03-25 date. So we will implement <code>Datetime</code> object and parse that filename to it,</p> <pre><code>assert (\n    Datetime.parse('filename_20220101.csv', 'filename_%Y%m%d.csv').value\n    == datetime.datetime(2022, 1, 1, 0)\n)\n</code></pre> <p>The above example is  NOT SURPRISE!!! for you right? Because the Python already provide the build-in <code>datetime</code> to parse by <code>datetime.strptime</code> and format by <code>{dt}.strftime</code> .</p> <p>This package will be the special thing when we group more than one format-able objects together as <code>Naming</code>, <code>Version</code>, and <code>Datetime</code>. For a complex filename format like ;</p> <pre><code>{filename:%s}_{datetime:%Y_%m_%d}.{version:%m.%n.%c}.csv\n</code></pre> <p>Warning</p> <p>Disclaimer: The above filename format, the <code>datetime</code> package that already build-in in Python does not enough for this scenario  but you can handle by your code function or create the better package than this project .</p> <p>Note</p> <p>Any formatter object was implemented the <code>self.valid</code> method for help us validate format string value like the above the example scenario,</p> <pre><code>this_date = Datetime.parse('20220101', '%Y%m%d')\nassert this_date.valid('any_files_20220101.csv', 'any_files_%Y%m%d.csv')\n</code></pre>"},{"location":"#next-step","title":"Next Step","text":"<p>I will change formatter object construction from changing with inside method to assert design. The code already implement and testing stage at file <code>__assets.py</code>.</p> <p>That mean, you can create any formatter object by dynamic asset changed strategy.</p> <pre><code>class Datetime(Formatter, asset=DATETIME_ASSET, config=DATETIME_CONF, level=10):\n    \"\"\"Datetime Formatter object.\"\"\"\n    ...\n</code></pre>"},{"location":"#contribute","title":"Contribute","text":"<p>I do not think this project will go around the world because it has specific propose and you can create by your coding without this project dependency for long term solution. So, on this time, you can open the GitHub issue on this project  for fix bug or request new feature if you want it.</p>"},{"location":"CHANGELOG/","title":"Changelogs","text":""},{"location":"CHANGELOG/#latest-changes","title":"Latest Changes","text":""},{"location":"CHANGELOG/#1015","title":"1.0.15","text":""},{"location":"CHANGELOG/#build-workflow","title":"Build &amp; Workflow","text":"<ul> <li> move auth with oidc on publish workflow.</li> </ul>"},{"location":"CHANGELOG/#1014","title":"1.0.14","text":""},{"location":"CHANGELOG/#build-workflow_1","title":"Build &amp; Workflow","text":"<ul> <li> update clishelf precommit hook and config.</li> </ul>"},{"location":"CHANGELOG/#dependencies","title":"Dependencies","text":"<ul> <li> move typing-extensions from require deps to test option.</li> <li> bump pypa/gh-action-pypi-publish from 1.12.3 to 1.12.4 (#117)</li> </ul>"},{"location":"CHANGELOG/#1013","title":"1.0.13","text":""},{"location":"CHANGELOG/#code-changes","title":"Code Changes","text":"<ul> <li> update clishelf version to 0.2.14. (2025-01-28)</li> <li> bump types-python-dateutil from 2.9.0.20241003 to 2.9.0.20241206 (2025-01-02)</li> <li> \u2b06 bump pypa/gh-action-pypi-publish from 1.12.2 to 1.12.3 (2025-01-02)</li> </ul>"},{"location":"CHANGELOG/#1012","title":"1.0.12","text":""},{"location":"CHANGELOG/#code-changes_1","title":"Code Changes","text":"<ul> <li> refactored: \u2b06 bump pypa/gh-action-pypi-publish from 1.11.0 to 1.12.2 (2024-12-01)</li> <li> refactored: \u2b06 bump codecov/codecov-action from 4 to 5 (2024-12-01)</li> <li> refactored: \ud83d\udce6 bump types-python-dateutil from 2.9.0.20240906 to 2.9.0.20241003 (2024-11-01)</li> <li> refactored: \u2b06 bump pypa/gh-action-pypi-publish from 1.10.2 to 1.11.0 (2024-11-01)</li> <li> tests: reformated testcase for use unittest method instead. (2024-10-22)</li> </ul>"},{"location":"CHANGELOG/#1011","title":"1.0.11","text":""},{"location":"CHANGELOG/#code-changes_2","title":"Code Changes","text":"<ul> <li> refactored: \u2b06 bump pypa/gh-action-pypi-publish from 1.10.1 to 1.10.2 (2024-10-01)</li> <li> merge: branch 'main' of https://github.com/korawica/fmtutil. (2024-09-25)</li> <li> refactored: \u2b06 bump pypa/gh-action-pypi-publish from 1.10.0 to 1.10.1 (2024-09-20)</li> <li> refactored: \ud83d\udce6 bump types-python-dateutil from 2.9.0.20240821 to 2.9.0.20240906 (2024-09-20)</li> </ul>"},{"location":"CHANGELOG/#documents","title":"Documents","text":"<ul> <li> docs: update readme and document files. (2024-09-26)</li> <li> docs: update info of this project on readme. (2024-09-25)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs","title":"Fix Bugs","text":"<ul> <li> fixed: fixed bumpping base version do not pass as kwargs. (2024-10-21)</li> <li> fixed: change hook pytest local id. (2024-10-08)</li> <li> fixed: fix pre-commit config syntax for version 4.0.0. (2024-10-08)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_2","title":"Build &amp; Workflow","text":"<ul> <li> build: change syntax of local hook with pytest. (2024-10-08)</li> </ul>"},{"location":"CHANGELOG/#1010","title":"1.0.10","text":""},{"location":"CHANGELOG/#code-changes_3","title":"Code Changes","text":"<ul> <li> tests: fixed datetime object parser for python 3.13. (2024-09-20)</li> <li> tests: add note and todo comments on __asset file. (2024-09-20)</li> </ul>"},{"location":"CHANGELOG/#documents_1","title":"Documents","text":"<ul> <li> docs: update examples documents and readme. (2024-09-20)</li> <li> docs: update documents and split contents. (2024-09-20)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_1","title":"Fix Bugs","text":"<ul> <li> fixed: change tag regex format on push event in docs workflow. (2024-09-18)</li> <li> fixed: ci workflow push artifact does not include hidden file by default. (2024-09-17)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_3","title":"Build &amp; Workflow","text":"<ul> <li> build: change workflow name from ci to coverage. (2024-09-17)</li> </ul>"},{"location":"CHANGELOG/#dependencies_1","title":"Dependencies","text":"<ul> <li> deps: add all on optional deps for optional relativedelta. (2024-09-20)</li> <li> deps: remove dev on optional deps. (2024-09-20)</li> <li> deps: add mkdocs-awesome-pages-plugin package for docs building. (2024-09-18)</li> </ul>"},{"location":"CHANGELOG/#109","title":"1.0.9","text":""},{"location":"CHANGELOG/#documents_2","title":"Documents","text":"<ul> <li> docs: update emoji on readme. (2024-09-17)</li> <li> docs: update readme for support python 3.13. (2024-09-02)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_2","title":"Fix Bugs","text":"<ul> <li> fixed: add id on step setup python version. (2024-09-17)</li> <li> fixed: add allow-prereleases flag for testing python 3.13. (2024-09-02)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_4","title":"Build &amp; Workflow","text":"<ul> <li> build: add link to package docs on issue config. (2024-09-17)</li> <li> build: update test workflow. (2024-09-17)</li> </ul>"},{"location":"CHANGELOG/#dependencies_2","title":"Dependencies","text":"<ul> <li> deps: update pre-commit hook of clishelf to 0.2.6. (2024-09-17)</li> <li> deps: add support for python version 3.13. (2024-09-02)</li> </ul>"},{"location":"CHANGELOG/#108","title":"1.0.8","text":""},{"location":"CHANGELOG/#code-changes_4","title":"Code Changes","text":"<ul> <li> refactored: \ud83d\udce6 bump types-python-dateutil from 2.9.0.20240316 to 2.9.0.20240821 (2024-09-01)</li> <li> refactored: \u2b06 bump pypa/gh-action-pypi-publish from 1.9.0 to 1.10.0 (2024-09-01)</li> </ul>"},{"location":"CHANGELOG/#documents_3","title":"Documents","text":"<ul> <li> docs: implement mkdocs-material to this project. (2024-09-02)</li> <li> docs: update docs on installation tipic readme. (2024-08-23)</li> <li> docs: update readme docs and package desc. (2024-08-23)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_3","title":"Fix Bugs","text":"<ul> <li> fixed: fixed topic value on classifiers package. (2024-08-23)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_5","title":"Build &amp; Workflow","text":"<ul> <li> build: add env attach to docs workflow. (2024-09-02)</li> </ul>"},{"location":"CHANGELOG/#107","title":"1.0.7","text":""},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li> feat: imgrate prepare_value function for Datetime. (2024-05-26)</li> <li> feat: transfer attributes and methods from origin formatter obj. (2024-05-25)</li> <li> feat: update importer for __asset objs. (2024-05-25)</li> <li> feat: add format method on assert module. (2024-05-25)</li> <li> feat: remove proxy obj and implement init instead. (2024-05-25)</li> <li> feat: add prepare_parsing cls method for receive parsing data. (2024-05-25)</li> <li> feat: add unescape regex on utils func. (2024-05-25)</li> </ul>"},{"location":"CHANGELOG/#code-changes_5","title":"Code Changes","text":"<ul> <li> refactored: \u2b06 bump pypa/gh-action-pypi-publish from 1.8.14 to 1.9.0 (2024-07-01)</li> <li> style: add type hint for mypy. (2024-05-26)</li> <li> tests: add test cases for the assets formatter obj on Serial. (2024-05-26)</li> <li> refactored: migrate prepare method to abstract class. (2024-05-25)</li> </ul>"},{"location":"CHANGELOG/#documents_4","title":"Documents","text":"<ul> <li> docs: add more format asset for datetime. (2024-05-26)</li> <li> docs: update readme docs and remove link of any formatter obj. (2024-05-25)</li> <li> docs: changelog does not valid with old setting. (2024-05-25)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_4","title":"Fix Bugs","text":"<ul> <li> fixed: fix type of operator property on assets formatter obj. (2024-05-26)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_6","title":"Build &amp; Workflow","text":"<ul> <li> build: remove fix version of pytest on tests workflow. (2024-05-25)</li> </ul>"},{"location":"CHANGELOG/#106","title":"1.0.6","text":""},{"location":"CHANGELOG/#features_1","title":"Features","text":"<ul> <li> feat: add escape formatter group function. (2024-05-24)</li> </ul>"},{"location":"CHANGELOG/#code-changes_6","title":"Code Changes","text":"<ul> <li> tests: add test cases for escape regex work. (2024-05-25)</li> <li> style: add logging with name on init file. (2024-05-19)</li> <li> style: change type hint for itself class to Self. (2024-05-18)</li> </ul>"},{"location":"CHANGELOG/#documents_5","title":"Documents","text":"<ul> <li> docs: update readme and doc-string. (#69) (2024-05-15)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_5","title":"Fix Bugs","text":"<ul> <li> fixed: import return type does not use on all. (2024-05-25)</li> <li> fixed: add abstractmethod for abc class. (2024-05-15)</li> </ul>"},{"location":"CHANGELOG/#dependencies_3","title":"Dependencies","text":"<ul> <li> deps: remove perf deps and add mkdocs deps for docs generator. (2024-05-15)</li> </ul>"},{"location":"CHANGELOG/#105","title":"1.0.5","text":""},{"location":"CHANGELOG/#features_2","title":"Features","text":"<ul> <li> feat: add validate method for Storage formatter object. (2024-05-02)</li> </ul>"},{"location":"CHANGELOG/#code-changes_7","title":"Code Changes","text":"<ul> <li> tests: add testcase for formatter group that should to fixed. (2024-05-02)</li> <li> tests: add testcase for str2byte on Storage formatter obj. (2024-05-02)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_6","title":"Fix Bugs","text":"<ul> <li> fixed: change staticmethod that use itself class to classmethod for support inherit. (2024-05-02)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_7","title":"Build &amp; Workflow","text":"<ul> <li> build: change repo url from github workflow file to env variable. (2024-05-02)</li> <li> build: add environment for seperate deployment to PyPI. (2024-05-02)</li> </ul>"},{"location":"CHANGELOG/#104","title":"1.0.4","text":""},{"location":"CHANGELOG/#features_3","title":"Features","text":"<ul> <li> feat: migrate and optimization the formatter object (2024-05-02)</li> </ul>"},{"location":"CHANGELOG/#code-changes_8","title":"Code Changes","text":"<ul> <li> refactored: change format generator suffix value update. (2024-05-02)</li> <li> refactored: add ClassVar to any class attributes. (2024-05-01)</li> <li> refactored: update change from the latest of main. (2024-05-01)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_7","title":"Fix Bugs","text":"<ul> <li> fixed: raise exception class does not use from exceptions file. (2024-05-02)</li> <li> fixed: revert \"Merge branch 'main' into migration\". (2024-04-30)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_8","title":"Build &amp; Workflow","text":"<ul> <li> build: add use venv step for activate python interpeter. (2024-04-30)</li> <li> build: add cache on venv that reduce installation time. (2024-04-30)</li> <li> build: use uv for installing Python dependencies in tests. (2024-04-30)</li> <li> build: change installation uv by curl command. (2024-04-30)</li> <li> build: test upgrade pip installation with uv. (2024-04-30)</li> </ul>"},{"location":"CHANGELOG/#103","title":"1.0.3","text":""},{"location":"CHANGELOG/#features_4","title":"Features","text":"<ul> <li> feat: add clishelf git config for force fix commit prefix. (2024-04-29)</li> <li> feat: add parse method on migration of formatter object. (2024-04-29)</li> <li> feat: change input argument name from register to asset. (2024-04-29)</li> <li> feat: add migration code for support dynamic creation. (2024-03-04)</li> </ul>"},{"location":"CHANGELOG/#code-changes_9","title":"Code Changes","text":"<ul> <li> refactored: remove exception classes that do not use on the formatter. (2024-04-29)</li> </ul>"},{"location":"CHANGELOG/#documents_6","title":"Documents","text":"<ul> <li> docs: add migration note on formatter file. (2024-04-29)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_8","title":"Fix Bugs","text":"<ul> <li> fixed: merge branch 'migration' that fix the suffix matching. (2024-04-29)</li> <li> fixed: fix the bug that does not add suffix with the correct cache number. (2024-04-29)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_9","title":"Build &amp; Workflow","text":"<ul> <li> build: add pytest on installation step that loss from clishelf. (2024-04-14)</li> </ul>"},{"location":"CHANGELOG/#dependencies_4","title":"Dependencies","text":"<ul> <li> deps: upgrade dependencies from main branch (#63) (2024-04-10)</li> </ul>"},{"location":"CHANGELOG/#102","title":"1.0.2","text":""},{"location":"CHANGELOG/#features_5","title":"Features","text":"<ul> <li> feat: override format method for support fstring. (2024-04-14)</li> </ul>"},{"location":"CHANGELOG/#code-changes_10","title":"Code Changes","text":"<ul> <li> refactored: \ud83d\udce6 bump types-python-dateutil from 2.8.19.20240106 to 2.9.0.20240316 (2024-04-01)</li> <li> refactored: \u2b06 bump pypa/gh-action-pypi-publish from 1.8.12 to 1.8.14 (2024-04-01)</li> <li> refactored: \u2b06 bump pypa/gh-action-pypi-publish from 1.8.11 to 1.8.12 (2024-03-01)</li> <li> style: add type TypeAlias for hint support change on 3.12. (2024-02-19)</li> <li> refactored: change repo type of clishelf from local to hook. (2024-02-13)</li> <li> refactored: \u2b06 bump actions/download-artifact from 3 to 4 (2024-02-01)</li> <li> refactored: \u2b06 bump codecov/codecov-action from 3 to 4 (2024-02-01)</li> <li> refactored: \u2b06 bump actions/upload-artifact from 3 to 4 (2024-02-01)</li> <li> refactored: \ud83d\udce6 bump types-python-dateutil from 2.8.19.14 to 2.8.19.20240106 (2024-02-01)</li> <li> refactored: \u2b06 bump actions/cache from 3 to 4 (2024-02-01)</li> </ul>"},{"location":"CHANGELOG/#documents_7","title":"Documents","text":"<ul> <li> docs: update README file. (2024-03-03)</li> <li> docs: update option highlight for note on README file. (2024-02-29)</li> <li> docs: update README for noted supported python version. (2024-02-12)</li> <li> docs: update README for supported python38. (2024-01-30)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_9","title":"Fix Bugs","text":"<ul> <li> fixed: change param name of download-artifact to pattern. (2024-03-03)</li> <li> fixed: fix pre-commit skip hook id on ci workflow. (2024-02-13)</li> <li> fixed: fix bug for download and upload artifact v4. (2024-02-12)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_10","title":"Build &amp; Workflow","text":"<ul> <li> build: add issue template for problem on GitHub repo. (2024-02-18)</li> <li> build: add multiple name for download and upload artifact supported on v4. (2024-02-12)</li> </ul>"},{"location":"CHANGELOG/#dependencies_5","title":"Dependencies","text":"<ul> <li> deps: add typing-extensions for support import TypeAlias. (2024-02-19)</li> </ul>"},{"location":"CHANGELOG/#101","title":"1.0.1","text":""},{"location":"CHANGELOG/#code-changes_11","title":"Code Changes","text":"<ul> <li> refactored: \ud83d\udea7 [pre-commit.ci] auto fixes from pre-commit.com hooks (2024-01-29)</li> <li> refactored: \ud83d\udea7 [pre-commit.ci] auto fixes from pre-commit.com hooks (2024-01-15)</li> <li> refactored: upgrade pyupgrade config for support py39. (2024-01-11)</li> <li> test: reformat test case that use assertIn instead assertTrue. (2024-01-11)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_11","title":"Build &amp; Workflow","text":"<ul> <li> build: remove fix version of clishelf package. (2024-01-30)</li> </ul>"},{"location":"CHANGELOG/#100","title":"1.0.0","text":""},{"location":"CHANGELOG/#features_6","title":"Features","text":"<ul> <li> feat: migrate code from py3.8 to py3.9 (#42) (2024-01-04)</li> </ul>"},{"location":"CHANGELOG/#044","title":"0.4.4","text":""},{"location":"CHANGELOG/#features_7","title":"Features","text":"<ul> <li> feat: add float2decimal util function for convert value in Storage formatter obj. (2023-10-16)</li> </ul>"},{"location":"CHANGELOG/#code-changes_12","title":"Code Changes","text":"<ul> <li> refactored: \u2b06 bump actions/setup-python from 4 to 5 (2024-01-01)</li> <li> refactored: \u2b06 bump actions/download-artifact from 3 to 4 (2024-01-01)</li> <li> refactored: \u2b06 bump actions/upload-artifact from 3 to 4 (2024-01-01)</li> <li> refactored: \ud83d\udce6 bump clishelf from 0.1.0 to 0.1.1 (2024-01-01)</li> <li> refactored: \u2b06 bump pypa/gh-action-pypi-publish from 1.8.10 to 1.8.11 (2023-12-01)</li> <li> refactored: \ud83d\udce6 bump clishelf from 0.0.4 to 0.1.0 (2023-11-01)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_10","title":"Fix Bugs","text":"<ul> <li> fixed: change name of config data for clishelf on pyproject file. (2024-01-04)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_12","title":"Build &amp; Workflow","text":"<ul> <li> build: change timezone from UTC to Etc/UTC. (2023-11-22)</li> <li> build: change frequency of dependabot from weekly to monthly. (2023-11-22)</li> </ul>"},{"location":"CHANGELOG/#043","title":"0.4.3","text":""},{"location":"CHANGELOG/#features_8","title":"Features","text":"<ul> <li> feat: create extract_wildcard class-method for BaseVersion object. (2023-10-16)</li> </ul>"},{"location":"CHANGELOG/#code-changes_13","title":"Code Changes","text":"<ul> <li> refactored: change object name of VersionPackage to VerPackage for reusable. (_2023-10-16)</li> <li> refactored: change type of standard value of Storage formatter obj. (2023-10-16)</li> </ul>"},{"location":"CHANGELOG/#042","title":"0.4.2","text":""},{"location":"CHANGELOG/#features_9","title":"Features","text":"<ul> <li> feat: add to_const use-case for the formatter group. (2023-10-15)</li> <li> feat: add string value that able to pass to any formatter objs. (2023-10-15)</li> <li> feat: add from_formats and from_value class-method for formatter group. (2023-10-14)</li> </ul>"},{"location":"CHANGELOG/#documents_8","title":"Documents","text":"<ul> <li> docs: update doc-string for Cosntant, FormatterGroup objs. (2023-10-14)</li> <li> docs: update doc-string on Naming, Storage formatter objs. (2023-10-13)</li> </ul>"},{"location":"CHANGELOG/#041","title":"0.4.1","text":""},{"location":"CHANGELOG/#features_10","title":"Features","text":"<ul> <li> feat: add train format for Naming formatter object. (2023-10-12)</li> </ul>"},{"location":"CHANGELOG/#code-changes_14","title":"Code Changes","text":"<ul> <li> refactor: \ud83d\udea7 [pre-commit.ci] auto fixes from pre-commit.com hooks (2023-10-09)</li> <li> refactor: \ud83d\udea7 [pre-commit.ci] pre-commit autoupdate (2023-10-09)</li> <li> refactored: add type hint on formatter obj. (2023-10-06)</li> <li> refactored: add next_version method to VersionPackage and test-cases. (2023-10-05)</li> </ul>"},{"location":"CHANGELOG/#documents_9","title":"Documents","text":"<ul> <li> docs: update doc-string on Datetime, Serial formatter objs. (2023-10-13)</li> <li> docs: update doc-string for formatter object. (2023-10-13)</li> <li> docs: update logo on python version support. (2023-10-06)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_13","title":"Build &amp; Workflow","text":"<ul> <li> build: add deps version on pyproject file. (2023-10-12)</li> </ul>"},{"location":"CHANGELOG/#040","title":"0.4.0","text":""},{"location":"CHANGELOG/#features_11","title":"Features","text":"<ul> <li> feat: add add operation for version formatter obj. (2023-10-05)</li> <li> feat: add VersionPackage that will instead packaging.version. (2023-10-04)</li> <li> feat: initial version object for Version formatter obj. (2023-10-03)</li> <li> feat: add %c and %u format for Serial formatter object. (2023-10-02)</li> </ul>"},{"location":"CHANGELOG/#code-changes_15","title":"Code Changes","text":"<ul> <li> refactor: \ud83d\udea7 [pre-commit.ci] pre-commit autoupdate (2023-10-03)</li> <li> test: add test-case that compare between the value and datetime with same format string. (2023-10-02)</li> <li> test: add storage examples test-case. (2023-10-02)</li> </ul>"},{"location":"CHANGELOG/#documents_10","title":"Documents","text":"<ul> <li> docs: update 'train' naming format in doc-string. (2023-10-03)</li> <li> docs: update length of license comment. (2023-10-02)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_14","title":"Build &amp; Workflow","text":"<ul> <li> build: add /tests/ on exclude list for build to sdist. (2023-10-02)</li> </ul>"},{"location":"CHANGELOG/#030","title":"0.3.0","text":""},{"location":"CHANGELOG/#features_12","title":"Features","text":"<ul> <li> feat: add checker method on SlotLevel object and validate of Naming. (2023-10-02)</li> <li> feat: add validate naming value for Naming formatter obj. (2023-10-01)</li> <li> feat: add validate datetime property on Datetime formatter obj. (2023-10-01)</li> <li> feat: add strct mode for check duplicat format value before initialize. (2023-10-01)</li> <li> feat: update formatter string for EnvConst object. (2023-09-19)</li> </ul>"},{"location":"CHANGELOG/#code-changes_16","title":"Code Changes","text":"<ul> <li> refactored: change name of method passer to from_value that relate with FormatterGroup. (2023-10-02)</li> <li> refactored: remove ddeutil deps and merge util funtions to local package. (2023-10-02)</li> <li> refactor: \ud83d\udea7 [pre-commit.ci] pre-commit autoupdate (2023-09-26)</li> <li> refactor: \ud83d\udea7 [pre-commit.ci] pre-commit autoupdate (2023-09-19)</li> </ul>"},{"location":"CHANGELOG/#documents_11","title":"Documents","text":"<ul> <li> docs: update use-case on README. (2023-10-02)</li> <li> docs: edit example code style on README. (2023-09-29)</li> <li> docs: update info in README and rename env const obj. (2023-09-18)</li> <li> docs: update doc-string for formatter module. (2023-09-18)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_11","title":"Fix Bugs","text":"<ul> <li> fixed: add condition that raise if format string does not exists in regexes. (2023-10-02)</li> <li> fixed: change condition of extract word for coverage. (2023-10-02)</li> </ul>"},{"location":"CHANGELOG/#023","title":"0.2.3","text":""},{"location":"CHANGELOG/#code-changes_17","title":"Code Changes","text":"<ul> <li> test: add test data path to gitignore file. (2023-09-17)</li> <li> refactor: [pre-commit.ci] pre-commit autoupdate (2023-09-12)</li> </ul>"},{"location":"CHANGELOG/#documents_12","title":"Documents","text":"<ul> <li> docs: add more detail in doc-string in formatter module. (2023-09-12)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_12","title":"Fix Bugs","text":"<ul> <li> fixed: change logic of ordering property of formatter constant and group. (2023-09-17)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_15","title":"Build &amp; Workflow","text":"<ul> <li> build: add skip local repo on pre-commit ci config. (2023-09-12)</li> </ul>"},{"location":"CHANGELOG/#022","title":"0.2.2","text":""},{"location":"CHANGELOG/#code-changes_18","title":"Code Changes","text":"<ul> <li> style: make newline on testing code and update usecase on README. (2023-09-11)</li> <li> refactored: add type hint and comment for mypy. (2023-09-10)</li> </ul>"},{"location":"CHANGELOG/#documents_13","title":"Documents","text":"<ul> <li> docs: update README on usecase topic. (2023-09-11)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_16","title":"Build &amp; Workflow","text":"<ul> <li> build: add dependabot for pip package. (2023-09-10)</li> <li> build: add condition for receive cache in the ci workflow. (2023-09-08)</li> </ul>"},{"location":"CHANGELOG/#021","title":"0.2.1","text":""},{"location":"CHANGELOG/#code-changes_19","title":"Code Changes","text":"<ul> <li> refactored: change deps package for dev and remove test from pyproject. (2023-09-08)</li> <li> refactored: remove un-use deps package from pyproject. (2023-09-08)</li> </ul>"},{"location":"CHANGELOG/#020","title":"0.2.0","text":""},{"location":"CHANGELOG/#code-changes_20","title":"Code Changes","text":"<ul> <li> refactored: rename package from dup-fmt to fmtutil on PyPI. (2023-09-07)</li> </ul>"},{"location":"CHANGELOG/#014","title":"0.1.4","text":""},{"location":"CHANGELOG/#features_13","title":"Features","text":"<ul> <li> feat: implement cls.adjust func to formatter group object. (2023-09-07)</li> <li> feat: custom operation property for Naming formatter obj. (2023-09-07)</li> <li> feat: custom operation property for Datetime formatter obj. (2023-09-07)</li> <li> feat: implement operation property to formatter object. (2023-09-07)</li> <li> feat: add prepare_value staticmethod on parent formatter class. (2023-09-07)</li> </ul>"},{"location":"CHANGELOG/#code-changes_21","title":"Code Changes","text":"<ul> <li> test: upgrade pre-commit hooks. (2023-09-07)</li> <li> test: add test case for serial operation scenarios. (2023-09-07)</li> </ul>"},{"location":"CHANGELOG/#013","title":"0.1.3","text":""},{"location":"CHANGELOG/#code-changes_22","title":"Code Changes","text":"<ul> <li> test: add test case for passing value to formatter static method. (2023-09-06)</li> <li> test: add examples test case for formatter group object. (2023-09-06)</li> </ul>"},{"location":"CHANGELOG/#012","title":"0.1.2","text":""},{"location":"CHANGELOG/#features_14","title":"Features","text":"<ul> <li> feat: add condition for validate value of formatter. (2023-09-06)</li> <li> feat: add .to_const() method on formatter object. (2023-09-06)</li> <li> feat: add base_fmt parameter on make_const func for ignore default. (2023-09-06)</li> <li> feat: add more type argument for formatter group class. (2023-09-06)</li> </ul>"},{"location":"CHANGELOG/#code-changes_23","title":"Code Changes","text":"<ul> <li> test: update test case for make formatter group from Constant. (2023-09-05)</li> </ul>"},{"location":"CHANGELOG/#011","title":"0.1.1","text":""},{"location":"CHANGELOG/#documents_14","title":"Documents","text":"<ul> <li> docs: update README for Storage formatter object. (2023-09-05)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_13","title":"Fix Bugs","text":"<ul> <li> fixed: constant factory function can receive None value. (#18) (2023-09-05)</li> </ul>"},{"location":"CHANGELOG/#010","title":"0.1.0","text":""},{"location":"CHANGELOG/#features_15","title":"Features","text":"<ul> <li> feat: add Storage formatter and order property on formatter group instance. (2023-09-05)</li> <li> feat: create make_const instead Constant function. (2023-09-05)</li> <li> feat: add dynamic class name on constant func constructor. (2023-09-05)</li> <li> feat: add fmt2const constructor func for create Constant object. (2023-09-05)</li> <li> feat: implement order property on the formatter group class. (2023-09-04)</li> <li> feat: revision formatter group object logic. (2023-09-04)</li> </ul>"},{"location":"CHANGELOG/#code-changes_24","title":"Code Changes","text":"<ul> <li> test: add more test cases for Storage formatter object. (2023-09-05)</li> <li> test: add test case for coverage running. (2023-09-05)</li> <li> refactored: remove extract_regex_with_value function from formatter package. (2023-09-04)</li> <li> refactored: move base_level to class attribute. (2023-09-04)</li> <li> refactored: remove base_attr_prefix from formatter class. (2023-09-04)</li> <li> refactored: remove ordered formatter clas. (2023-09-04)</li> <li> test: change and fix test case for formatter group. (2023-09-04)</li> <li> refactored: improve pref on regex classmethod. (2023-09-03)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_14","title":"Fix Bugs","text":"<ul> <li> fixed: fix mypy for typing hint. (2023-09-05)</li> </ul>"},{"location":"CHANGELOG/#006","title":"0.0.6","text":""},{"location":"CHANGELOG/#features_16","title":"Features","text":"<ul> <li> feat: add new constructor of Constant object that receive fmt and value. (2023-09-01)</li> </ul>"},{"location":"CHANGELOG/#code-changes_25","title":"Code Changes","text":"<ul> <li> test: add test-case for parsing when formatter does not set group name. (2023-09-03)</li> <li> refactored: add suffix index on regex group name when parsing format. (2023-09-03)</li> <li> refactored: edit code statement that support mypy. (2023-09-01)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_15","title":"Fix Bugs","text":"<ul> <li> fixed: add condition of camel convert function if case empty string value. (2023-09-01)</li> <li> fixed: remove print debug stage from main code. (2023-09-01)</li> </ul>"},{"location":"CHANGELOG/#005post1","title":"0.0.5.post1","text":""},{"location":"CHANGELOG/#features_17","title":"Features","text":"<ul> <li> feat: create_const function can receive Formatter instance. (2023-09-01)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_16","title":"Fix Bugs","text":"<ul> <li> fixed: fix parser method of formatter object that riase if duplicate format str. (2023-09-01)</li> </ul>"},{"location":"CHANGELOG/#005post0","title":"0.0.5.post0","text":""},{"location":"CHANGELOG/#code-changes_26","title":"Code Changes","text":"<ul> <li> refactored: change import layer of dup-uitls deps package. (2023-08-28)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_17","title":"Fix Bugs","text":"<ul> <li> fixed: generate Constant instance does not separate class attr. (2023-08-31)</li> </ul>"},{"location":"CHANGELOG/#005","title":"0.0.5","text":""},{"location":"CHANGELOG/#code-changes_27","title":"Code Changes","text":"<ul> <li> refactored: change import layer of dup-uitls deps package. (2023-08-28)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_18","title":"Fix Bugs","text":"<ul> <li> fixed: generate Constant instance does not separate class attr. (2023-08-31)</li> </ul>"},{"location":"CHANGELOG/#005_1","title":"0.0.5","text":""},{"location":"CHANGELOG/#features_18","title":"Features","text":"<ul> <li> feat: add make_order_fmt func that make new order formatter obj. (2023-08-27)</li> <li> feat: add auto_serial in formatter ordered object. (2023-08-27)</li> <li> feat: add FMTS class attr for dynamic foramtter mapping when ordered. (2023-08-26)</li> </ul>"},{"location":"CHANGELOG/#code-changes_28","title":"Code Changes","text":"<ul> <li> refactored: add type of formatter group argument. (2023-08-27)</li> <li> refactored: split object of relative to objects file. (2023-08-27)</li> <li> test: add test cases for relativeserial object. (2023-08-26)</li> <li> style: reformat code and comment message. (2023-08-26)</li> <li> style: change code style that make wrong newline issue. (2023-08-26)</li> <li> refactored: add pre-commit message and change deps of test and dev optional deps. (2023-08-25)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_19","title":"Fix Bugs","text":"<ul> <li> fixed: change the version of dup-utils that fix import issue. (2023-08-27)</li> <li> fixed: duplicate replaces to the previous value on format method. (2023-08-26)</li> <li> fixed: add omit cli files for coverage process (2023-08-25)</li> </ul>"},{"location":"CHANGELOG/#004","title":"0.0.4","text":""},{"location":"CHANGELOG/#features_19","title":"Features","text":"<ul> <li> feat: add cli commands of formatter object parsing method (2023-08-24)</li> <li> feat: add utils package from dup-uitls project (2023-07-11)</li> <li> feat: add cli for formatter package (2023-07-10)</li> <li> feat: add performance load test for memory usage when init (2023-06-19)</li> <li> feat: Create dependabot.yml (2023-06-19)</li> <li> feat: add script for commit-msg and generate release note (2023-06-19)</li> <li> feat: edit pre-commit-msg hook (2023-06-19)</li> <li> feat: New (2023-06-19)</li> </ul>"},{"location":"CHANGELOG/#code-changes_29","title":"Code Changes","text":"<ul> <li> test: add type annotation with required by mypy package (2023-08-24)</li> <li> refactor: remove commit-message script (2023-07-03)</li> <li> refactor: \u2b06 bump actions/setup-python from 3 to 4 (2023-06-19)</li> <li> refactor: \u2b06 bump pypa/gh-action-pypi-publish from 1.8.5 to 1.8.6 (2023-06-19)</li> <li>script: add precommit (2023-06-19)</li> <li> test: add type construct of formatter object scenario (2023-06-19)</li> </ul>"},{"location":"CHANGELOG/#documents_15","title":"Documents","text":"<ul> <li> docs: prepare and remove unsuable code in pyproject.toml (2023-06-23)</li> </ul>"},{"location":"CHANGELOG/#fix-bugs_20","title":"Fix Bugs","text":"<ul> <li> fix: delete extension file from git command (2023-06-20)</li> <li> fix: merge change from main that add dependabot config (2023-06-19)</li> <li> fix: commit-msg (2023-06-19)</li> <li> fix:  (2023-06-19)</li> <li> fix: has_warning (2023-06-19)</li> </ul>"},{"location":"CHANGELOG/#build-workflow_17","title":"Build &amp; Workflow","text":"<ul> <li> build: add bump2version dependency and update version dup-utils (2023-08-24)</li> </ul>"},{"location":"CHANGELOG/#003post1","title":"0.0.3.post1","text":"<p>Fix:</p> <ul> <li> fix: add type annotation for 100% coverage that missing (#7)</li> <li> fix: debug pytest for another python versions</li> </ul> <p>Features:</p> <ul> <li> feat: add abstract class for Formatter object (#7)</li> </ul> <p>Documents:</p> <ul> <li> docs: add more README.md</li> </ul>"},{"location":"CHANGELOG/#003","title":"0.0.3","text":"<p>Fix:</p> <ul> <li> fix: add ignore htmlcov</li> </ul> <p>Workflows:</p> <ul> <li> build: add black config on pyproject.toml</li> </ul> <p>Features:</p> <ul> <li> feat: add type annotation and fix typing issue for mypy 100% coverage (#6)</li> <li> test: add test examples</li> <li> feat: add bump2version</li> <li> feat: add local hook for pytest</li> <li> feat: add test pipeline for python version 3.10, 3.11</li> </ul> <p>Documents</p> <ul> <li> docs: add more CONTRIBUTING.md</li> </ul>"},{"location":"CHANGELOG/#002","title":"0.0.2","text":"<p>Fix:</p> <ul> <li> fix: pypi release does not publish</li> </ul>"},{"location":"CHANGELOG/#001","title":"0.0.1","text":"<p>Fix:</p> <ul> <li> fix: clear debug command on workflow</li> <li> fix: ci pipeline does not add htmlcov/ (#4)</li> <li> fix: add debug for ci pipeline</li> <li> fix: htmlcov/ on coverage comment action (#3)</li> <li> fix: add htmlcov/ for action comment bot</li> <li> fix: feature and workflows from v0.0.1 (#2)</li> <li> fix: coverage in ci pipeline</li> <li> fix: ls command in ci pipeline</li> </ul> <p>Workflows:</p> <ul> <li> workflow: remove ci for any version branch</li> <li> build: move version to about (#1)</li> <li> workflow: edit ci pipeline</li> <li> build: move version to about</li> <li> action: add github actions</li> </ul> <p>Features:</p> <ul> <li> feat: add foramtter package for version 0.0.1</li> </ul> <p>Documents:</p> <ul> <li> docs: edit README file</li> <li> docs: add README and pyproject.toml files</li> </ul>"},{"location":"error_handler/","title":"Error Handler","text":""},{"location":"error_handler/#simple-try-catch","title":"Simple <code>try-catch</code>","text":"<pre><code>from fmtutil import Datetime\nfrom fmtutil.exceptions import FormatterError\n\ntry:\n    parse_dt: Datetime = Datetime.parse(value='Constant_normal', fmt='Constant_%n')\n    parse_dt.format('The value of %%s is %s')\nexcept FormatterError as err:\n    print(f\"Raise error: {err}\")\n</code></pre> <pre><code>Raise error: ...\n</code></pre>"},{"location":"examples/search_files/","title":"Search Files","text":"<p>If you have multi-format filenames on the data source directory, and you want to dynamic getting max datetime on these filenames to your function, you can use a formatter group.</p>"},{"location":"examples/search_files/#scenario-01-search-with-naming-and-datetime","title":"Scenario 01: search with naming and datetime","text":"<p>On the source directory that you want to get the latest file from a business date in the filename (It so easy if you want to get the latest modified date) include other files that not has format name relate with your requirement.</p> <pre><code>|\n|--- googleMap_20230101.json\n|--- googleMap_20230103.json\n|--- googleMap_20230103_bk.json\n|--- googleMap_with_usage_20230105.json\n|--- googleDrive_with_usage_20230105.json\n</code></pre>"},{"location":"examples/search_files/#code","title":"Code","text":"<pre><code>from fmtutil import (\n  make_group, Naming, Datetime, FormatterGroup, FormatterGroupType, FormatterArgumentError\n)\n\nname: Naming = Naming.parse('Google Map', fmt='%t')\n\nfmt_group: FormatterGroupType = make_group({\n    \"naming\": name.to_const(),\n    \"timestamp\": Datetime,\n})\n\nrs: list[FormatterGroup] = []\nfor file in (\n    'googleMap_20230101.json',\n    'googleMap_20230103.json',\n    'googleMap_20230103_bk.json',\n    'googleMap_with_usage_20230105.json',\n    'googleDrive_with_usage_20230105.json',\n):\n    try:\n        rs.append(\n            fmt_group.parse(file, fmt=r'{naming:c}_{timestamp:%Y%m%d}\\.json')\n        )\n    except FormatterArgumentError:\n        continue\n\nrepr(max(rs).groups['timestamp'])\n</code></pre> <pre><code>&gt;&gt;&gt; &lt;Datetime.parse('2023-01-03 00:00:00.000000', '%Y-%m-%d %H:%M:%S.%f')&gt;\n</code></pre> <p>Note</p> <p>The above Example will convert the <code>name</code>, Naming instance, to Constant instance before passing to the Formatter Group because it does not want to dynamic parsing this format when find any matching filenames at destination path.</p>"},{"location":"features/formatter_group/","title":"Formatter Group","text":"<p>The FormatterGroup object, <code>FormatterGroup</code>, which is the grouping of needed mapping formatter objects and its alias formatter object ref name together. You can define a name of formatter that you want, such as <code>name</code> for <code>Naming</code>, or <code>timestamp</code> for <code>Datetime</code>.</p> <p>Example</p> <p>Define a formatter group object;</p> <pre><code>from fmtutil import make_group, Naming, Datetime, FormatterGroupType\n\ngroup_obj: FormatterGroupType = make_group({'name': Naming, 'datetime': Datetime})\n</code></pre> <p>Parse:</p> <pre><code>group_obj.parse('data_engineer_in_20220101_de', fmt='{name:%s}_in_{timestamp:%Y%m%d}_{name:%a}')\n</code></pre> <pre><code>&gt;&gt;&gt; {\n&gt;&gt;&gt;     'name': Naming.parse('data engineer', '%n'),\n&gt;&gt;&gt;     'timestamp': Datetime.parse('2022-01-01 00:00:00.000000', '%Y-%m-%d %H:%M:%S.%f')\n&gt;&gt;&gt; }\n</code></pre> <p>Format:</p> <pre><code>from fmtutil import FormatterGroup\nfrom datetime import datetime\n\ngroup_01: FormatterGroup = group_obj({'name': 'data engineer', 'datetime': datetime(2022, 1, 1)})\ngroup_01.format('{name:%c}_{timestamp:%Y_%m_%d}')\n</code></pre> <pre><code>&gt;&gt;&gt; dataEngineer_2022_01_01\n</code></pre>"},{"location":"features/formatter_group/#api","title":"API","text":"<pre><code>Group of Formatters with dynamic group naming like 'timestamp' for\nDatetime, 'name' for Naming. This class will use for ``make_group``\nconstructor function because of different and complicate group of formatter\ninstances.\n\n:param formats: A mapping value of priority attribute data.\n:type formats: FormatsGroupType\n:param ignore_construct: A flag for ignore pass an input formats value to\n    validate and construct function.\n:type ignore_construct: bool(=False)\n\n:raises FormatterGroupValueError: If any group naming from an input formats\n    does not exist in ``cls.base_groups`` value.\n\n.. class-attributes::\n    * base_groups: BaseGroupsType\n        The base group of naming and Formatter class.\n\n.. class-method::\n    * __parse: ReturnParseType\n        A mapping of fmt, value, and props keys that passing from searching\n        step with `re` module.\n    * parse: Self\n        An instance of formatter group that parse from a bytes or string\n        value by a format string.\n    * gen_format: Tuple[str, ReturnGroupGenFormatType]\n        A tuple of group naming and format string value that change format\n        string to regular expression string for complied to the `re` module.\n    * from_formatter: Self\n        An instance of formatter group that was pass formats value directly\n        to its formatter object.\n    * from_value: Self\n        An instance of formatter group that was use ``cls.from_value``\n        method from any formatter object and its value.\n\n.. attributes::\n    * groups: GroupsType\n        A dict of group naming and Formatter instance.\n\n.. methods::\n    * __construct_groups: [str, Union[DictStr, Formatter, Any]] -&gt; Formatter\n        A Formatter instance.\n    * format: [str] -&gt; str\n        A string value that was formatted and filled by an input format\n        string pattern.\n    * adjust: [Dict[str, Any]] -&gt; Self\n        Adjust any formatter instance in ``self.groups`` of this formatter\n        group.\n    * to_const: list[str] | None -&gt; FormatterGroupType\n        A FormatterGroup object that create from constant of ``self.groups``\n        values.\n\n.. seealso::\n\n    This class is an abstract class for any formatter group that override\nthe ``cls.base_groups`` value with mapping for group naming and Formatter\nobject.\n</code></pre>"},{"location":"features/slot_level/","title":"SlotLevel Object","text":"<pre><code>Slot level object for order priority values. This was mean if\nyou implement this slot level object to attribute on your class\nand update level to an instance when it has some action, it will\nbe make the level more than another instance.\n\n:param level: a level number of this slot instance.\n:type level: int\n\nAttributes:\n    * level: int\n        A number of level that represent n-layer of this instance.\n    * slot: List[bool]\n        A list of boolean that have index equal the level attribute.\n    * count: int\n        A counting number of True value in the slot.\n    * value: int\n        A sum of weighted value from a True value in any slot position.\n\nMethods:\n    * update: [Optional[Union[int, TupleInt]]] -&gt; SlotLevel\n        Self that was updated level\n    * checker: [Union[int, TupleInt]] -&gt; bool\n        A True if all values in ``self.slot`` that match with index numbers\n        are True.\n\nStatic-methods:\n    * make_tuple: [Union[int, TupleInt]] -&gt; TupleInt\n        A tuple of integer value that was created from input.\n</code></pre>"},{"location":"features/formatters/constant/","title":"Constant","text":"<p>All formatter object can convert itself to constant formatter object for frozen parsing value to constant by <code>.to_const()</code>.</p> <p>Note</p> <p>This package already implement the environment constant object, <code>fmtutil.EnvConst</code>.</p> <p>Examples</p> <pre><code>from fmtutil import Constant, make_const\nfrom fmtutil.exceptions import FormatterError\n\nconst = make_const({'%n': 'normal', '%s': 'special'})\ntry:\n    parse_const: Constant = const.parse(value='Constant_normal', fmt='Constant_%n')\n    parse_const.format('The value of %%s is %s')\nexcept FormatterError:\n    pass\n</code></pre> <pre><code>&gt;&gt;&gt; 'The value of %s is special'\n</code></pre>"},{"location":"features/formatters/constant/#environment-constant","title":"Environment Constant","text":"<pre><code>%d  : development\n%-d : dev\n%D  : DEVELOPMENT\n%-D : DEV\n%s  : sit\n%-s : sit\n%S  : SIT\n%u  : uat\n%-u : uat\n%U  : UAT\n%p  : production\n%-p : prd\n%P  : PRODUCTION\n%-P : PROD\n%t  : test\n%-t : test\n%T  : TEST\n%b  : sandbox\n%-b : box\n%B  : SANDBOX\n%-B : BOX\n%c  : poc\n%C  : POC\n</code></pre>"},{"location":"features/formatters/datetime/","title":"Datetime","text":"<p>Example</p> <pre><code>from fmtutil import Datetime\n\ndatetime = Datetime.parse(value='Datetime_20220101_000101', fmt='Datetime_%Y%m%d_%H%M%S')\ndatetime.format('New_datetime_%Y%b-%-d_%H:%M:%S')\n</code></pre> <pre><code>&gt;&gt;&gt; 'New_datetime_2022Jan-1_00:01:01'\n</code></pre>"},{"location":"features/formatters/datetime/#api","title":"API","text":"<p>Formatter Mapping:</p> <pre><code>%n  : Normal format with `%Y%m%d_%H%M%S`\n%Y  : Year with century as a decimal number.\n%y  : Year without century as a zero-padded decimal number.\n%-y : Year without century as a decimal number.\n%m  : Month as a zero-padded decimal number.\n%-m : Month as a decimal number.\n%b  : Abbreviated month name.\n%B  : Full month name.\n%a  : the abbreviated weekday name\n%A  : the full weekday name\n%w  : weekday as a decimal number, 0 as Sunday and 6 as Saturday.\n%u  : weekday as a decimal number, 1 as Monday and 7 as Sunday.\n%d  : Day of the month as a zero-padded decimal.\n%-d : Day of the month as a decimal number.\n%H  : Hour (24-hour clock) as a zero-padded decimal number.\n%-H : Hour (24-hour clock) as a decimal number.\n%I  : Hour (12-hour clock) as a zero-padded decimal number.\n%-I : Hour (12-hour clock) as a decimal number.\n%M  : minute as a zero-padded decimal number\n%-M : minute as a decimal number\n%S  : second as a zero-padded decimal number\n%-S : second as a decimal number\n%j  : day of the year as a zero-padded decimal number\n%-j : day of the year as a decimal number\n%U  : Week number of the year (Sunday as the first day of the\n    week). All days in a new year preceding the first Sunday are\n    considered to be in week 0.\n%W  : Week number of the year (Monday as the first day of the week\n    ). All days in a new year preceding the first Monday are\n    considered\n    to be in week 0.\n%p  : Locale\u2019s AM or PM.\n%f  : Microsecond as a decimal number, zero-padded on the left.\n</code></pre>"},{"location":"features/formatters/formatter/","title":"Formatter","text":"<p>The main purpose is Formatter Objects for <code>parse</code> and <code>format</code> with string value, such as <code>Datetime</code>, <code>Version</code>, and <code>Serial</code> formatter objects. These objects were used for parse any filename with put the format string value.</p> <p>The formatter able to enhancement any format value from sting value, like in <code>Datetime</code>, for <code>%B</code> value that was designed for month shortname (<code>Jan</code>, <code>Feb</code>, etc.) that does not support in build-in <code>datetime</code> package.</p> <p>Important</p> <p>The main usage of this formatter object is <code>parse</code> and <code>format</code> method.</p>"},{"location":"features/formatters/formatter/#api","title":"API","text":"<pre><code>Formatter object for inherit to any formatter subclass that define\nformat and parse method. The base class will implement necessary\nproperties and method for subclass that should implement or enhance such\nas `the cls.formatter()` method or the `cls.priorities` property.\n\n:param formats: A mapping value of priority attribute data.\n:type formats: Optional[dict](=None)\n:param set_strict_mode: A flag to allow checking duplicate attribute value.\n:type set_strict_mode: bool(=False)\n:param set_std_value: A flag to allow for set standard value form string,\n    `self.class-name.lower()` if it True.\n:type set_std_value: bool(=True)\n\n.. class attributes::\n    * base_fmt: str\n        The base default format string value for this object.\n    * base_level: int\n        The maximum level of slot level of this instance.\n    * Config: object\n        A Configuration object that use for group and keep any config for\n        this sub-formatter object.\n\n.. class-methods::\n    * from_value: Formatter\n        An instance of formatter that was use ``cls.parse`` method from any\n        correct string value with the ``cls.base_fmt`` value.\n    * parse: Formatter\n        An instance of formatter that parse from a bytes or string value by\n        a format string or base format string if it None.\n    * gen_format: str\n        A format string value that was changed to the regular expression\n        string value for comply with the `re` module to any string value.\n    * regex: DictStr\n        A dict of format string, and it's regular expression string\n        value that was generated from values of ``cls.formatter``.\n\n.. attributes::\n    * value: Any\n        A value that define by property of this formatter object.\n    * string: str\n        A standard string value that define by property of this formatter\n        object.\n    * level: SlotLevel\n        A SlotLevel instance that have level with ``cls.base_level``.\n    * priorities: ReturnPrioritiesType\n        A priorities value that define by property of this formatter object.\n\n.. methods::\n    * _setter_std_value: [bool] -&gt; NoReturn\n        Setting standard value that have an argument name be the class name\n        with lower case if input flag is True.\n    * values: [Optional[Any]] -&gt; DictStr\n        A dict of format string, and it's string value that was passed an\n        input value to `cls.formatter` method.\n    * format: [str] -&gt; str\n        A string value that was formatted from format string pattern.\n    * validate: [] -&gt; bool\n        A Validate method that will call after setup all attributes in\n        initialize layer.\n    * valid: [] -&gt; Any\n        A True value if the value from ``cls.parse`` of a string value,\n        and a format string pattern is valid with ``self.value``.\n    * to_const: [] -&gt; ConstantType\n        A ConstantType class that have class name with\n        ``f'{self.__class__.__name__}Const'`` with ``self.values()``.\n\n.. static-methods::\n    * __validate_format: [Optional[Dict[str, Any]]] -&gt; Dict[str, Any]\n        A formats value that validate with duplicate format string values.\n    * formatter: [Optional[Any]] -&gt; ReturnFormattersType\n        A formatter value that define by property of this formatter object.\n    * prepare_value: [Any] -&gt; Any\n        A prepared value with defined logic.\n\n.. seealso::\n\n    This class is abstract class for any formatter class. It will raise\n`NotImplementedError` when the necessary attributes and methods does not\nimplement from subclass.\n</code></pre>"},{"location":"features/formatters/naming/","title":"Naming","text":"<p>Example</p> <pre><code>from fmtutil import Naming\n\nnaming = Naming.parse(value='de is data engineer', fmt='%a is %n')\nnaming.format('Camel case is %c')\n</code></pre> <pre><code>&gt;&gt;&gt; 'Camel case is dataEngineer'\n</code></pre>"},{"location":"features/formatters/naming/#api","title":"API","text":"<p>Formatter Mapping:</p> <pre><code>%n  : Normal name format\n%N  : Normal name upper case format\n%-N : Normal name title case format\n%u  : Upper case format\n%l  : Lower case format\n%t  : Title case format\n%a  : Shortname format\n%A  : Shortname upper case format\n%f  : Flat case format\n%F  : Flat upper case format\n%c  : Camel case format\n%-c : Upper first Camel case format\n%p  : Pascal case format\n%s  : Snake case format\n%S  : Snake upper case format\n%-S : Snake title case format\n%k  : Kebab case format\n%K  : Kebab upper case format\n%-K : Kebab title case format (Train Case)\n%T  : Train case format\n%v  : normal name removed vowel\n%V  : normal name removed vowel with upper case\n</code></pre>"},{"location":"features/formatters/serial/","title":"Serial","text":"<p>Example</p> <pre><code>from fmtutil import Serial\n\nserial = Serial.parse(value='Serial_62130', fmt='Serial_%n')\nserial.format('Convert to binary: %b')\n</code></pre> <pre><code>&gt;&gt;&gt; 'Convert to binary: 1111001010110010'\n</code></pre>"},{"location":"features/formatters/serial/#api","title":"API","text":"<p>Formatter Mapping:</p> <pre><code>%n  : Normal format\n%p  : Padding number\n%b  : Binary number\n%c  : Normal with comma separate number\n%u  : Normal with underscore separate number\n</code></pre>"},{"location":"features/formatters/storage/","title":"Storage","text":"<p>Example</p> <pre><code>from fmtutil import Storage\n\nstorage = Storage.parse(value='This file have 250MB size', fmt='This file have %M size')\nstorage.format('The byte size is: %b')\n</code></pre> <pre><code>&gt;&gt;&gt; 'The byte size is: 2097152000'\n</code></pre>"},{"location":"features/formatters/storage/#api","title":"API","text":"<p>Formatter Mapping:</p> <pre><code>%b  : Bit format\n%B  : Byte format\n%K  : Kilo-Byte format\n%M  : Mega-Byte format\n%G  : Giga-Byte format\n%T  : Tera-Byte format\n%P  : Peta-Byte format\n%E  : Exa-Byte format\n%Z  : Zetta-Byte format\n%Y  : Yotta-Byte format\n</code></pre>"},{"location":"features/formatters/version/","title":"Version","text":"<p>Example</p> <pre><code>from fmtutil import Version\n\nversion = Version.parse(value='Version_2_0_1', fmt='Version_%m_%n_%c')\nversion.format('New_version_%m%n%c')\n</code></pre> <pre><code>&gt;&gt;&gt; 'New_version_201'\n</code></pre>"},{"location":"features/formatters/version/#api","title":"API","text":"<p>Formatter Mapping:</p> <pre><code>%f  : full version format with `%m_%n_%c`\n%-f : full version format with `%m-%n-%c`\n%m  : major number\n%n  : minor number\n%c  : micro number\n%e  : epoch release\n%q  : pre-release\n%p  : post release\n%-p : post release number\n%d  : dev release\n%l  : local release\n%-l : local release number\n</code></pre>"}]}